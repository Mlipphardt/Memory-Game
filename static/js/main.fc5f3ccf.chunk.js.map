{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Modal/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","onClick","handleClick","id","src","image","alt","name","Wrapper","children","Navbar","score","topScore","Modal","class","Header","App","state","characters","clicked","incrementScore","setState","concat","shuffleArray","includes","length","resetGame","document","getElementById","textContent","modalSwitch","classList","add","setTimeout","remove","this","array","rolledIndex","tempHolder","currentIndex","Math","floor","random","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc5f3ccf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img src={props.image} alt={props.name} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div id=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-item\">Deep Sea Memory Challenge</div>\r\n      <div className=\"nav-item\">\r\n        <span className=\"score-item\">Score: {props.score}</span>\r\n        <span className=\"score-item\">Top Score: {props.topScore}</span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n//Modal to display wins and losses\r\n\r\nfunction Modal() {\r\n  return (\r\n    <div id=\"results-modal\" class=\"results-modal\">\r\n      <p id=\"results-text\"></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        Click the images to earn points, but don't click the same image twice or\r\n        you'll lose!\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Modal from \"./components/Modal\";\nimport Header from \"./components/Header\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  state = {\n    characters: characters,\n    clicked: [],\n    score: 0,\n    topScore: 0,\n  };\n\n  //Checks if new top score has been reached when score updates.\n  componentDidUpdate() {\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n  }\n\n  //Increments score by one.\n  incrementScore = (id) => {\n    this.setState((state) => ({\n      clicked: state.clicked.concat([id]),\n      score: this.state.score + 1,\n    }));\n  };\n\n  // Fires if image clicked\n  handleClick = (id) => {\n    //Shuffles characters in state, redisplays them in new order.\n    this.setState({ characters: this.shuffleArray(characters) });\n    //If picture has not been clicked this game, keep track in state, add to score.\n    if (!this.state.clicked.includes(id) && this.state.clicked.length < 11) {\n      this.incrementScore(id);\n    } else if (this.state.clicked.length === 11) {\n      //If all pictures have been clicked, display win modal.\n      this.setState({ topScore: 12 });\n      this.resetGame();\n      document.getElementById(\"results-text\").textContent = \"You win!\";\n      this.modalSwitch();\n    } else {\n      //If picture has been clicked this game, show loss, reset score.\n      //Shakes pictures upon loss.\n      document.getElementById(\"wrapper\").classList.add(\"wrapper-shake\");\n      setTimeout(\n        () =>\n          document.getElementById(\"wrapper\").classList.remove(\"wrapper-shake\"),\n        1000\n      );\n      //Display loss to user in modal.\n      document.getElementById(\"results-text\").textContent = \"You lose!\";\n      this.modalSwitch();\n      this.resetGame();\n    }\n  };\n\n  //Displays modal for 2 seconds upon win or loss.\n  modalSwitch = () => {\n    document.getElementById(\"results-modal\").classList.add(\"show\");\n    setTimeout(() => {\n      document.getElementById(\"results-modal\").classList.remove(\"show\");\n    }, 2000);\n  };\n\n  //Resets game\n  resetGame = () => {\n    this.setState((state) => ({\n      clicked: [],\n      score: 0,\n    }));\n  };\n\n  //Fisher-Yates algorithim for shuffling cards.\n  shuffleArray(array) {\n    //Variables to save current index, save a random index, and transfer numbers.\n    let currentIndex = array.length,\n      rolledIndex,\n      tempHolder;\n\n    //Will end when no numbers left to shuffle.\n    while (currentIndex) {\n      //Rolls to pick a random unshuffled item.\n      rolledIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      //Back of array of unshuffled item saved.\n      tempHolder = array[currentIndex];\n      //Randomly rolled item placed in back of unshuffled array items.\n      array[currentIndex] = array[rolledIndex];\n      //Former rolled index now becomes the number formerly in the back of the unshuffled array.\n      array[rolledIndex] = tempHolder;\n    }\n    //Return the shuffled array.\n    return array;\n  }\n\n  render() {\n    return (\n      <div>\n        <Modal />\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <div id=\"background\">\n          <Wrapper>\n            {this.state.characters.map((character) => (\n              <CharacterCard\n                name={character.name}\n                image={character.image}\n                key={character.id}\n                id={character.id}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}